{"version":3,"sources":["components/Counter.js","components/CounterList.js","actions/ActionTypes.js","utils/index.js","containers/CounterListContainer.js","actions/index.js","components/Buttons.js","containers/App.js","reducers/index.js","index.js"],"names":["Counter","_ref","index","number","color","onIncrement","onDecrement","onSetColor","react_default","a","createElement","className","onClick","onContextMenu","e","preventDefault","onDoubleClick","style","backgroundColor","defaultProps","console","warn","CounterList","counters","counterList","map","counter","i","src_components_Counter","Object","assign","key","CREAT","REMOVE","INCREMENT","DECREMENT","SET_COLOR","getRandomColor","Math","floor","random","CounterListCountainer","connect","state","dispatch","type","types","actions","Buttons","onCreate","onRemove","App","_this$props","this","props","src_components_Buttons","CounterListContainer","Component","initialState","arguments","length","undefined","action","toConsumableArray","concat","slice","objectSpread","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.1796ce62.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Counter.css';\r\n\r\nconst Counter = ({index, number, color, onIncrement, onDecrement, onSetColor}) => {//{ }는 전달받을 props들\r\n  return (\r\n    <div\r\n      className=\"Counter\"\r\n      onClick={() => onIncrement(index)}//전달해야 할 것은 함수이지 함수호출이 아니다. 참조(누구든지 하는 리액트4편: props와 state): https://velopert.com/3629\r\n      onContextMenu={\r\n        (e) => {\r\n          e.preventDefault();\r\n          onDecrement(index);\r\n        }\r\n      }\r\n      onDoubleClick={() => onSetColor(index)}//전달해야 할 것은 함수! 함수호출이 아님\r\n      style={{backgroundColor: color}}>\r\n      {number}\r\n    </div>\r\n  );\r\n};\r\nCounter.propTypes = {//컴포넌트로 전달되는 props의 type 정의\r\n  index: PropTypes.number,\r\n  number: PropTypes.number,\r\n  color: PropTypes.string,\r\n  onIncrement: PropTypes.func,\r\n  onDecrement: PropTypes.func,\r\n  onSetColor: PropTypes.func\r\n};\r\nCounter.defaultProps = {//props가 넘어오지 않을 시를 대비한 initialize\r\n  index: 0,//props가 안넘어올 때 모든 counter의 index가 0으로 동일해지면 무조건 에러를 호출해야 한다.\r\n  number: 0,\r\n  color: 'black',\r\n  onIncrement: () => console.warn('onIncrement not defined'),\r\n  onDecrement: () => console.warn('onDecrement not defined'),\r\n  onSetColor: () => console.warn('onSetColor not defined')\r\n}\r\n\r\nexport default Counter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Counter from './Counter'\r\nimport './CounterList.css';\r\n\r\nconst CounterList = ({counters, onIncrement, onDecrement, onSetColor}) => {\r\n  const counterList = counters.map(\r\n    (counter, i) => (\r\n      <Counter\r\n        key={i}\r\n        index={i}\r\n        {...counter}\r\n        onIncrement={onIncrement}\r\n        onDecrement={onDecrement}\r\n        onSetColor={onSetColor}\r\n      />\r\n    )\r\n  );\r\n\r\n  return (\r\n    <div className=\"CounterList\">\r\n      {counterList}{/*counterList 변수를 사용한다*/}\r\n    </div>\r\n  );\r\n};\r\nCounterList.propTypes = {\r\n  counters: PropTypes.arrayOf(PropTypes.shape({\r\n    color: PropTypes.string,\r\n    number: PropTypes.number\r\n  })),\r\n  onIncrement: PropTypes.func,\r\n  onDecrement: PropTypes.func,\r\n  onSetColor: PropTypes.func\r\n}\r\nCounterList.defaultProps = {\r\n  counters: [],\r\n  onIncrement: () => console.warn('onIncrement not defined'),\r\n  onDecrement: () => console.warn('onDecrement not defined'),\r\n  onSetColor: () => console.warn('onSetColor not defined')\r\n}\r\n\r\nexport default CounterList;\r\n","/* Declare action types\r\nconst 변수에 export를 붙이면 다른 파일에서 import * as types from './ActionTypes' 와 같이 쓸 수 있다.\r\naction creator와 reduce에서 이를 사용한다.\r\n*/\r\nexport const CREAT = 'CREAT';//Counter 추가\r\nexport const REMOVE = 'REMOVE';//Counter 제거\r\n\r\nexport const INCREMENT = 'INCREMENT';//숫자 증가\r\nexport const DECREMENT = 'DECREMENT';//숫자 감소\r\nexport const SET_COLOR = 'SET_COLOR';//더블 클릭하면 색이 변함\r\n","export function getRandomColor() {\r\n  const colors = [//12개 색상\r\n    '#495057',\r\n    '#f03e3e',\r\n    '#d6336c',\r\n    '#ae3ec9',\r\n    '#7048e8',\r\n    '#4263eb',\r\n    '#1c7cd6',\r\n    '#1098ad',\r\n    '#0ca678',\r\n    '#37b24d',\r\n    '#74b816',\r\n    '#f59f00',\r\n    '#f76707'\r\n  ];\r\n  const random = Math.floor(Math.random() * 13);//0~12사이 랜덤값\r\n  return colors[random];\r\n}\r\n","import CounterList from '../components/CounterList';\r\nimport * as actions from '../actions';\r\nimport { getRandomColor } from '../utils'; //선언형 함수 import할 때 { functionName }, 표현형은 중괄호 없이 functionName\r\nimport { connect } from 'react-redux';\r\n\r\n//store state connect to props\r\nconst mapStateToProps = (state) => ({\r\n  counters: state.counters\r\n});\r\n\r\n//store dispatch(createdActions) connect to props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onIncrement: (index) => dispatch(actions.increment(index)),\r\n  onDecrement: (index) => dispatch(actions.decrement(index)),\r\n  onSetColor: (index) => {\r\n    const color = getRandomColor();\r\n    dispatch(actions.setColor({index, color}));\r\n  }\r\n});\r\n\r\n//container component의 dispatch to store\r\n//presentational component의 store에 listener 서비스 subscribe 신청 및 store의 listener 서비스 시행\r\nconst CounterListCountainer = connect(\r\n  mapStateToProps, mapDispatchToProps\r\n)(CounterList);\r\n\r\nexport default CounterListCountainer;\r\n","/* Declare action creators\r\nAction creators make action object.\r\nAction creators에도 export를 붙여 component container에서 store에 dispatch 할 때 사용하도록 한다.\r\n*/\r\n\r\nimport * as types from './ActionTypes'\r\n\r\nexport const create = (color) => ({\r\n  type: types.CREAT,\r\n  color: color\r\n});\r\n\r\nexport const remove = () => ({\r\n  type: types.REMOVE\r\n});\r\n\r\n/* 이하 action creator들의 index는 multi Counter program으로 확장할 때\r\n특정 Counter를 지정해서 action을 수행하도록 하기 위함 */\r\nexport const increment = (index) => ({//단순히 1 더하는거라 number는 지정하지 않음\r\n  type: types.INCREMENT,\r\n  index: index\r\n});\r\n\r\nexport const decrement = (index) => ({//단순히 1 빼는거라 number는 지정하지 않음\r\n  type: types.DECREMENT,\r\n  index: index\r\n});\r\n\r\nexport const setColor = ({index, color}) => ({\r\n  type: types.SET_COLOR,\r\n  index: index,\r\n  color: color\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Buttons.css';\r\n\r\nconst Buttons = ({onCreate, onRemove}) => {\r\n  return (\r\n    <div className=\"Buttons\">\r\n      <div\r\n        className=\"btn create\"\r\n        onClick={onCreate}\r\n        >\r\n        생성\r\n      </div>\r\n      <div\r\n        className=\"btn remove\"\r\n        onClick={onRemove}\r\n        >\r\n        제거\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nButtons.propTypes = {\r\n  onCreate: PropTypes.func,\r\n  onRemove: PropTypes.func\r\n}\r\nButtons.defaultProps = {\r\n  onCreate: () => console.warn('onCreate not defined'),\r\n  onRemove: () => console.warn('onRemove not defined')\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { Component } from 'react';\r\nimport CounterListContainer from './CounterListContainer';\r\nimport Buttons from '../components/Buttons';\r\nimport { getRandomColor } from '../utils';\r\nimport * as actions from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const { onCreate, onRemove } = this.props; //아래 mapDispatchToProps에서 정의하고 export connect(mapProps)(App) 한것이 App의 props로 전달됨\r\n    return (\r\n      <div className=\"App\">\r\n        <Buttons\r\n          onCreate={onCreate}\r\n          onRemove={onRemove}\r\n        />\r\n        {/*<Counter> //redux store 만들기 전*/}\r\n        {/*<CounterContainer />*/}\r\n        <CounterListContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onCreate: () => dispatch(actions.create(getRandomColor())),\r\n  onRemove: () => dispatch(actions.remove())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App)\r\n","//multi counter reducer\r\nimport * as types from '../actions/ActionTypes'\r\n\r\nconst initialState = {\r\n  counters: [ //multi counter 각각의 state 관리를 위해 상태 객체{ }들의 배열[ ]을 만든다.\r\n      {\r\n        color: 'black',\r\n        number: 0\r\n      }\r\n  ]\r\n}\r\n\r\n//reducer define\r\nfunction counter(state = initialState, action) {\r\n  const { counters } = state; //state.counters 배열을 counters로 줄여서 사용하기 위해 정의\r\n\r\n  switch (action.type) {\r\n    case types.CREAT:\r\n      return {\r\n        counters: [ //counters 배열에 새로 생성된 counter의 객체가 추가된다.\r\n          ...counters, //counters 배열을 spread(...)하면 기존 생성되있던 counter들의 state 객체들이 나온다.\r\n          { //새로 생성된 counter의 state 객체\r\n            color: action.color,\r\n            number: 0\r\n          }\r\n        ]\r\n      };\r\n    case types.REMOVE: //맨 마지막 카운터의 state를 제외시킨다.\r\n      return {\r\n        counters: counters.slice(0, counters.length - 1)\r\n      };\r\n    case types.INCREMENT:\r\n      return { //slice는 새로운 배열을 return\r\n        counters: [ // 액션 취할 state 앞 뒤로 객체들을 펼치고, action 취하고, 다시 합쳐 배열로 만든다.\r\n          ...counters.slice(0, action.index), //increment action을 취하는 객체 이전까지의 객체들 spread\r\n          {\r\n            ...counters[action.index], //counters[index] 객체를 spread(...)하면 key-value pair가 나온다.\r\n            number: counters[action.index].number + 1 //number key-value pair가 counters[index] 객체에 있으면 number를 +1해서 덮어쓴다.\r\n          },\r\n          ...counters.slice(action.index + 1, counters.length) //increment action을 취하는 객체 이후의 객체들 spread\r\n        ]\r\n      };\r\n    case types.DECREMENT: //increament action과 완전히 동일한 구조\r\n      return {\r\n        counters: [\r\n          ...counters.slice(0, action.index),\r\n          {\r\n            ...counters[action.index],\r\n            number: counters[action.index].number - 1\r\n          },\r\n          ...counters.slice(action.index + 1, counters.length)\r\n        ]\r\n      };\r\n    case types.SET_COLOR: //increament action과 완전히 동일한 구조\r\n      return {\r\n        counters: [\r\n          ...counters.slice(0, action.index),\r\n          {\r\n            ...counters[action.index],\r\n          color: action.color //color를 action으로 받은 값으로 재지정하고 counters[index]의 color key-value pair를 덮어쓴다.\r\n          },\r\n          ...counters.slice(action.index + 1, counters.length)\r\n        ]\r\n      };\r\n    default:\r\n      return state; //reducer의 기본은 state와 action을 받아서 action을 하고 변한 state를 반환하는 것이다.\r\n  }\r\n}\r\n\r\nexport default counter\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\n\n//Redux 관련 import\nimport { createStore } from 'redux';\nimport reducers from './reducers';//reducer 정의된 폴더\nimport { Provider } from 'react-redux';//Provider는 react App에 Store를 쉽게 연동할 수 있게 해주는 컴포넌트\n\n//create store(redux dev tool 사용을 위해 window parameter 2개를 createStore에 넘겨줘야 한다)\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n//Provider로 react App에 store 연동\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}